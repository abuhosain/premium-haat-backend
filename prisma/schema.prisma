generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String     @id @default(uuid())
  email    String     @unique
  password String
  role     UserRole
  status   UserStatus @default(ACTIVE)
  vendor   Vendor?
  profile  Profile?
  follow   Follow[]
  review   Review[]

  @@map("users")
}

model Vendor {
  id          String  @id @default(uuid())
  email       String  @unique
  name        String
  phone       String
  logo        String
  description String
  isBlocked   Boolean @default(false)

  user     User       @relation(fields: [email], references: [email])
  product  Product[]
  follow   Follow[]
  response Response[]

  @@map("vendors")
}

model Profile {
  id        String  @id @default(uuid())
  email     String  @unique
  firstName String
  lastName  String
  phone     String
  address   String
  img       String
  isDeleted Boolean @default(false)
  user      User    @relation(fields: [email], references: [email])

  @@map("profiles ")
}

model Follow {
  id       String @id @default(uuid())
  userId   String
  vendorId String

  user   User   @relation(fields: [userId], references: [id])
  vendor Vendor @relation(fields: [vendorId], references: [id])

  @@unique([userId, vendorId])
  @@map("follows")
}

model Category {
  id      String    @id @default(uuid())
  name    String
  icon    String
  product Product[]

  @@map("categories")
}

model Product {
  id          String   @id @default(uuid())
  vendorId    String
  title       String
  img         String
  description String
  price       Float
  categoryId  String
  quantity    Int
  discount    Float
  couponId    String?
  createdAt   DateTime @default(now())

  // Relation
  category Category @relation(fields: [categoryId], references: [id])
  vendor   Vendor   @relation(fields: [vendorId], references: [id])
  coupon   Coupon?  @relation(fields: [couponId], references: [id])
  review   Review[]

  @@map("products")
}

model Review {
  id          String @id @default(uuid())
  description String
  rating      Int
  productId   String
  userId      String

  user     User       @relation(fields: [userId], references: [id])
  product  Product    @relation(fields: [productId], references: [id])
  response Response[]

  @@map("reviews")
}

model Response {
  id          String @id @default(uuid())
  reviewId    String
  vendorId    String
  description String

  vendor Vendor @relation(fields: [vendorId], references: [id])
  review Review @relation(fields: [reviewId], references: [id])

  @@map("response")
}

model Coupon {
  id         String    @id @default(uuid())
  code       String    @unique
  percentage Float
  expiryDate DateTime
  productId  String?
  product    Product[]

  @@map("coupons")
}

enum UserRole {
  ADMIN
  CUSTOMER
  VENDOR
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}
